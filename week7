Problem 1:
#include<iostream>
#include<limits.h>

using namespace std;

int minDistance(int V,int dist[],bool shortpath[]){
    int min= INT_MAX,m_index;
    for(int v=0;v<V;v++){
        if(!shortpath[v]&&dist[v]<=min){
            min=dist[v];
            m_index=v;
        }
    }
    return m_index;
}


void dijkstra(int **g,int V,int s){
    int dist[V];
    int parent[V];
    bool shortpath[V];
    for(int i=0;i<V;i++){
        dist[i]=INT_MAX;
        shortpath[i]=false;
        parent[i]=0;
    }
    dist[s]=0;
    for(int i=0;i<V;i++){
        int u=minDistance(V,dist,shortpath);
        shortpath[u]=true;
        for(int v=0;v<V;v++){
            if(!shortpath[v] && g[u][v] && dist[v]>dist[u]+g[u][v]){
                dist[v]=dist[u]+g[u][v];
                parent[v]=u;
            }
        }
    }
    for(int i=0;i<V;i++){
        cout<<"Node "<<i+1<<"  | Path: ";
        int j=i;
        while(j!=s){
            cout<<parent[j]+1<<"<-";
            j=parent[j];
        }
        cout<<" | Distance: "<<dist[i]<<endl;
    }
}

int main(){
    int v,s;
    cin>>v;
    int **g = new int*[v];
    for(int i=0;i<v;i++)
        g[i]= new int[v];

    for(int i=0;i<v;i++)
        for(int j=0;j<v;j++)
            cin>>g[i][j];
    cin>>s;
    dijkstra(g,v,s-1);
    return 0;
}

Problem:2
#include<iostream>
#include<limits.h>

using namespace std;


void bellman_ford(int **g,int V,int s){
    int dist[V];
    int parent[V];
    bool shortpath[V];
    for(int i=0;i<V;i++){
        dist[i]=INT_MAX;
        parent[i]=0;
    }
    dist[s]=0;
    for(int i=0;i<V-1;i++){
        for(int u=s;u<V;u++){
            for(int v=0;v<V;v++){
                if(dist[u]!=INT_MAX && g[u][v] && dist[v]>dist[u]+g[u][v]){
                    dist[v]=dist[u]+g[u][v];
                    parent[v]=u;
                }
            }
        }
    }

    for(int u=0;u<V;u++){
        for(int v=0;v<V;v++){
            if(g[u][v] && dist[v]>dist[u]+g[u][v]){
                cout<<"-ve cycle exist.";
                return;
            }
        }
    }

    for(int i=0;i<V;i++){
        cout<<"Node "<<i+1<<"  | Path: ";
        int j=i;
        while(j!=s){
            cout<<parent[j]+1<<"<-";
            j=parent[j];
        }
        cout<<" | Distance: "<<dist[i]<<endl;
    }
}

int main(){
    int v,s;
    cin>>v;
    int **g = new int*[v];
    for(int i=0;i<v;i++)
        g[i]= new int[v];

    for(int i=0;i<v;i++)
        for(int j=0;j<v;j++)
            cin>>g[i][j];
    cin>>s;
    bellman_ford(g,v,s-1);
    return 0;
}

Problem 3:
#include<iostream>
#include<limits.h>
#include<algorithm>
using namespace std;
int shortest_path_k_edge(int **g,int v,int s,int d,int k){
    int s_path_weight[v][v][k+1];
    for(int e=0;e<=k;e++){
        for(int i=0;i<v;i++){
            for(int j=0;j<v;j++){
                s_path_weight[i][j][e]=INT_MAX;

                if(e==0&&i==j)
                    s_path_weight[i][j][e]=0;

                if(e==1&&g[i][j])
                    s_path_weight[i][j][e]=g[i][j];

                if(e>1){
                    for(int a=0;a<v;a++){
                        if(g[i][a] && i!=a && j!=a && s_path_weight[a][j][e-1]!=INT_MAX)
                            s_path_weight[i][j][e] = min(s_path_weight[i][j][e],g[i][a]+s_path_weight[a][j][e-1]);
                    }
                }
            }
        }
    }
    return s_path_weight[s][d][k];
}

int main(){
    int v,s,d,k;
    cin>>v;
    int **g = new int*[v];
    for(int i=0;i<v;i++)
        g[i]= new int[v];

    for(int i=0;i<v;i++)
        for(int j=0;j<v;j++)
            cin>>g[i][j];
    cin>>s>>d>>k;
    int res = shortest_path_k_edge(g,v,s-1,d-1,k);
    if(res==INT_MAX)
        cout<<"NO PATH EXIST.";
    else
        cout<<"Weight of shortest path: "<<res;
    return 0;
}
