Problem 1:
#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;
bool compare(pair<int,int> a,pair<int,int> b){
    if(a.first==b.first)
        return a.second<b.second;
    else
        return a.first<b.first;
}
int check_index(int a[],int b[],int i,int j,bool complete[],int n){
    for(int k=0;k<n;k++){
        if(a[k]==i&&b[k]==j&&!complete[k]){
            complete[k]=true;
            return k+1;
        }
    }
}
int main(){
    int n,i;
    cin>>n;
    vector<pair<int,int>> v;
    int tt[n],e[n];
    for(i=0;i<n;i++)
        cin>>tt[i];
    for(i=0;i<n;i++)
        cin>>e[i];
    for(i=0;i<n;i++)
        v.push_back(make_pair(e[i],tt[i]));
    vector<int> t;
    sort(v.begin(),v.end());
    int count=0,j=0;
    bool comp[n]={false};
    for(int i=0;i<n;i++){
        if(v[i].first-j>=v[i].second){
            j=j+v[i].second;
            count++;
            t.push_back(check_index(e,tt,v[i].first,v[i].second,comp,n));
        }
    }
    cout<<"Max number of task: "<<count;
    cout<<"\nSelected task no: ";
    for(int i=0;i<t.size();i++){
        cout<<t.at(i)<<",";
    }
    return 0;
}

Problem 2:
#include <iostream>
#include <vector>

using namespace std;

struct node{
     int u,v,wt;
     node(int a, int b, int c){
          u = a;
          v = b;
          wt = c;
     }
};

bool comp(node a, node b){
     return a.wt < b.wt;
}

int find_par(int n, vector<int>& parent){
     if(n == parent[n])
          return n;
     parent[n] = find_par(parent[n], parent);
     return parent[n];
}

void unionn(int u, int v, vector<int>& rank, vector<int>& parent){
     u = find_par(u, parent);
     v = find_par(v, parent);
     
     if(rank[u] > rank[v])
          parent[v] = u;
     else if(rank[v] > rank[u])
          parent[u] = v;
     else{
          parent[v] = u;
          rank[u]++;
     }
}
                                                                 

int main(){
     int n;
     cin>>n;
     int wt;
     vector<node> edge;
     for(int i=0; i<n; i++){
          for(int j=0; j<n; j++){
               cin>>wt;
               if(wt!=0){
                    edge.push_back(node(i,j,wt));
               }
          }
     }
     sort(edge.begin(), edge.end(), comp);
     vector<int> parent(n);
     
     for(int i=0; i<n; i++)
          parent[i] = i;
     
     vector<int> rank(n, 0);
     int cost=0;
     vector<pair<int, int>> mst;
     
     for(auto it : edge){
          if( find_par(it.u, parent) != find_par(it.v, parent)){
               cost += it.wt;
               mst.push_back({it.u, it.v});
               unionn(it.u, it.v, rank, parent);
          }
     }
     cout<<"Minimum Spanning Weight: "<<cost<<endl;

     return 0;
}

Problem 3:
#include <iostream>
#include <vector>

using namespace std;

struct node{
     int u,v,wt;
     node(int a, int b, int c){
          u = a;
          v = b;
          wt = c;
     }
};

bool comp(node a, node b){
     return a.wt > b.wt;
}

int find_par(int n, vector<int>& parent){
     if(n == parent[n])
          return n;
     parent[n] = find_par(parent[n], parent);
     return parent[n];
}

void unionn(int u, int v, vector<int>& rank, vector<int>& parent){
     u = find_par(u, parent);
     v = find_par(v, parent);
     
     if(rank[u] > rank[v])
          parent[v] = u;
     else if(rank[v] > rank[u])
          parent[u] = v;
     else{
          parent[v] = u;
          rank[u]++;
     }
}
                                                                 

int main(){
     int n;
     cin>>n;
     int wt;
     vector<node> edge;
     for(int i=0; i<n; i++){
          for(int j=0; j<n; j++){
               cin>>wt;
               if(wt!=0){
                    edge.push_back(node(i,j,wt));
               }
          }
     }
     sort(edge.begin(), edge.end(), comp);
     vector<int> parent(n);
     
     for(int i=0; i<n; i++)
          parent[i] = i;
     
     vector<int> rank(n, 0);
     int cost=0;
     vector<pair<int, int>> mst;
     
     for(auto it : edge){
          if( find_par(it.u, parent) != find_par(it.v, parent)){
               cost += it.wt;
               mst.push_back({it.u, it.v});
               unionn(it.u, it.v, rank, parent);
          }
     }
     cout<<"Minimum Spanning Weight: "<<cost<<endl;
     return 0;
}

